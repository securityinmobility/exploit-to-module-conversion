from ai_chat.prompt_handling import run_exploit_conversion
import argparse


def parse_arguments():
    # Create the parser
    parser = argparse.ArgumentParser(description='This program converts an exploit code into a module for an automated penetration testing framework with the following parameters needed. Example parameters: --prompt_directory="C:\\prompts" --exploit_path="C:\\exploits\\test_exploit.py" --example_module_path="C:\\frameworks\\automated-pentesting\\modules\\port_scan.py" --artifact_directory="C:\\frameworks\\automated-pentesting\\artifacts\\"')

    # Define the arguments
    parser.add_argument('--prompt_directory', type=str, required=True, help='The directory where the prompts can be found')
    parser.add_argument('--exploit_path', type=str, required=True, help='The path to the exploit file which should be converted into a module')
    parser.add_argument('--example_module_path', type=str, required=True, help='The path to the example module file')
    parser.add_argument('--artifact_directory', type=str, required=True, help='The directory where all the artifacts are in')

    # Parse the arguments
    args = parser.parse_args()

    # Access the arguments
    prompt_directory = args.prompt_directory
    exploit_path = args.exploit_path
    example_module_path = args.example_module_path
    artifact_directory = args.artifact_directory

    # Return the arguments
    return prompt_directory, exploit_path, example_module_path, artifact_directory


def main():
    prompt_directory, exploit_path, example_module_path, artifact_directory = parse_arguments()
    print(prompt_directory)
    run_exploit_conversion(directory_of_prompts=prompt_directory, directory_of_artifacts=artifact_directory, example_module_path=example_module_path, path_to_exploit_code=exploit_path)


if __name__ == "__main__":
    main()